<?xml version="1.0" ?>
<launch>

  <!-- Robot arguments -->
  <arg name="fake_localisation" default="true" doc="fake the localisation, sets map_server and world_tf to true."/>
  <arg name="riseholme_dt" default="false"/>
  <arg name="robot_name" default="thorvald"/>
  <arg name="robot_no" default="001"/>  <!-- unused-->
  <arg name="robot_model" default="$(find bacchus_gazebo)/config/robot.yaml"/>
  <arg name="model_extras" default="$(find bacchus_gazebo)/urdf/bacchus_sensors.xacro"/>
  <arg name="multi_sim" default="false"/>
  <!-- sensor suites:
    - simple_sensors
    - bacchus_sensors (2 hokuyo, 3 kinect v2, 1 velodyne)
    -->

  <!-- navigation arguments -->
  <arg name="launch_move_base" default="true"/>
  <arg name="tf_prefix" default="$(arg robot_name)/"/>
  <arg name="use_carrot_planner" default="false"/>
  <arg name="use_omni" default="false"/>
  <arg name="world_2_map_pose" default="0.0 0.0 0.0 0.0 0.0 0.0 1.0" />
  
  <arg name="X_INIT" value="40.0" if="$(arg riseholme_dt)"/>
  <arg name="Y_INIT" value="-40.0" if="$(arg riseholme_dt)"/>
  <arg name="Z_INIT" value="1.2" if="$(arg riseholme_dt)"/>
  <arg name="nav_map_yaml" default="$(find bacchus_gazebo)/maps/riseholme.yaml" if="$(arg riseholme_dt)"/>

  <arg name="X_INIT" value="-11.0" unless="$(arg riseholme_dt)"/>
  <arg name="Y_INIT" value="0.0" unless="$(arg riseholme_dt)"/>
  <arg name="Z_INIT" value="1.0" unless="$(arg riseholme_dt)"/>
  <arg name="nav_map_yaml" default="$(find bacchus_gazebo)/maps/cropped.yaml" unless="$(arg riseholme_dt)"/>


  <!-- ############################## GAZEBO ############################## -->
  <arg name="world_name" default="vineyard_small_s0_coarse" unless="$(arg riseholme_dt)"/>
  <arg name="world_name" value="riseholme_digital_twin" if="$(arg riseholme_dt)"/>
  <!-- Note: the world_name is with respect to GAZEBO_RESOURCE_PATH environmental variable -->
  <arg name="world" default="$(find bacchus_gazebo)/worlds/$(arg world_name).world"/>
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="false"/>

  <!-- ############################### RVIZ ############################### -->
  <arg name="launch_rviz" default="true"/>
  <arg name="rviz_config_file" default="$(find bacchus_gazebo)/rviz/vineyard_demo.rviz"/>


  <!-- ############################### ROBOT ############################## -->

  <include file="$(find bacchus_gazebo)/launch/thorvald.launch">
    <arg name="single_robot"      value="true"/>
    <arg name="robot_name"        value="$(arg robot_name)_001" />
    <arg name="robot_no"          value="$(arg robot_no)" />
    <!-- <arg name="tf_prefix"         value="$(arg robot_name)_1/" /> -->
    <arg name="x"                 value="$(arg X_INIT)" />
    <arg name="y"                 value="$(arg Y_INIT)" />
    <arg name="z"                 value="$(arg Z_INIT)" />
    <arg name="robot_model"       value="$(arg robot_model)"/>
    <arg name="model_extras"      value="$(arg model_extras)"/>
    <arg name="world_name"        value="$(arg world)"/>
    <arg name="fake_localisation" value="$(arg fake_localisation)"/>
    <arg name="nav_map_yaml"      value="$(arg nav_map_yaml)"/>
    <arg name="rviz_config_file"  value="$(arg rviz_config_file)"/>
    <arg name="paused"            value="$(arg paused)"/>
    <arg name="use_sim_time"      value="$(arg use_sim_time)"/>
    <arg name="gui"               value="$(arg gui)"/>
    <arg name="debug"             value="$(arg debug)"/>
    <arg name="verbose"           value="$(arg verbose)"/>
    <arg name="launch_move_base"  value="$(arg launch_move_base)"/>
  </include>

  <group if="$(arg multi_sim)">
    <include file="$(find bacchus_gazebo)/launch/thorvald.launch" >
      <arg name="single_robot"      value="false"/>
      <arg name="robot_name"        value="$(arg robot_name)_002" />
      <arg name="robot_no"          value="001" />
      <!-- <arg name="tf_prefix"         value="$(arg robot_name)_2/" /> -->
      <arg name="x"                 value="-8.0" />
      <arg name="y"                 value="$(arg Y_INIT)" />
      <arg name="z"                 value="$(arg Z_INIT)" />
      <arg name="robot_model"       value="$(arg robot_model)"/>
      <arg name="model_extras"      value="$(arg model_extras)"/>
      <arg name="world_name"        value="$(arg world)"/>
      <arg name="fake_localisation" value="$(arg fake_localisation)"/>
      <arg name="nav_map_yaml"      value="$(arg nav_map_yaml)"/>
      <arg name="rviz_config_file"  value="$(arg rviz_config_file)"/>
      <arg name="paused"            value="$(arg paused)"/>
      <arg name="use_sim_time"      value="$(arg use_sim_time)"/>
      <arg name="gui"               value="$(arg gui)"/>
      <arg name="debug"             value="$(arg debug)"/>
      <arg name="verbose"           value="$(arg verbose)"/>
      <arg name="launch_move_base"  value="$(arg launch_move_base)"/>
    </include>
  </group>

      <arg name="file" default="$(find uol_cmp9767m_tutorial)/maps/test.tmap2"/>
    <!-- Robot base frame. -->
    <arg name="base_frame" default="thorvald_001/base_link" />
    <!-- The planner being used by move_base. STRANDS systems tend to use DWAPlannerROS Jackal and HSR TrajectoryPlannerROS.  -->
    <arg name="move_base_planner" default="move_base/DWAPlannerROS"/>

	<group ns="thorvald_001">
		<!-- launch robot_pose_publisher -->
		<node pkg="robot_pose_publisher" type="robot_pose_publisher" name="robot_pose_publisher" respawn="true">
			<param name="~map_frame" value="map"/>
			<param name="~base_frame" value="thorvald_001"/>
		</node>
		
		<!-- move_base -->
		<node name="move_base" pkg="move_base" type="move_base" output="screen">
	        <remap from="odom" to="odometry/base_raw" />
	        <remap from="cmd_vel" to="nav_vel" />
			<remap from="map" to="/map"/>

	        <rosparam file="$(find uol_cmp9767m_tutorial)/config/costmap_common_params.yaml" command="load" ns="global_costmap"/>
	        <rosparam file="$(find uol_cmp9767m_tutorial)/config/costmap_common_params.yaml" command="load" ns="local_costmap"/>
	        <rosparam file="$(find uol_cmp9767m_tutorial)/config/global_costmap_params.yaml" command="load"/>
	        <rosparam file="$(find uol_cmp9767m_tutorial)/config/local_costmap_params.yaml" command="load"/>
	        <rosparam file="$(find uol_cmp9767m_tutorial)/config/planners.yaml" command="load"/>
		</node> 
	</group>

    <arg name="robot_name" default="thorvald_001" />


  <node pkg="topological_navigation" type="map_manager2.py" name="topological_map_manager" args="$(arg file)" respawn="true"/>

  <group ns="$(arg robot_name)">

    <node pkg="topological_navigation" name="topological_localisation" type="localisation.py" output="screen" respawn="true">
      <param name="base_frame" value="$(arg base_frame)"/>
      <remap from="topological_map_2" to="/topological_map_2"/>
    </node>
    
    <node pkg="topological_navigation" name="topological_navigation" type="navigation.py" output="screen" respawn="true">
      <param name="move_base_planner" type="str" value="$(arg move_base_planner)"/>
      <remap from="topological_map_2" to="/topological_map_2"/>
      <remap from="/closest_edges" to="closest_edges"/>
    </node>

    <node pkg="topological_navigation" type="visualise_map.py" name="visualise_map" respawn="true">
      <remap from="topological_map_2" to="/topological_map_2"/>
      <remap from="topological_map" to="/topological_map"/>
      <remap from="/topological_navigation/Route" to="topological_navigation/Route"/>
    </node>
  </group>
  
</launch>